apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'
android {
    compileSdkVersion rootProject.ext.extCompileSdkVersion
    defaultConfig {
        applicationId "com.lzp.appexp"
        minSdkVersion rootProject.ext.extMinSdkVersion
        targetSdkVersion rootProject.ext.extTargetSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    compileOptions {
        targetCompatibility rootProject.ext.javaVersion
        sourceCompatibility rootProject.ext.javaVersion
    }

    signingConfigs {
        debug {
            /*storeFile file('./appExp.jks')
            storePassword "appExp123"
            keyAlias "appExp"
            keyPassword "appExp123"*/
        }
        release {
            /*storeFile file('./appExp.jks')
            storePassword "appExp123"
            keyAlias "appExp"
            keyPassword "appExp123"*/
        }
    }

    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
            signingConfig signingConfigs.debug
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            debuggable false
            minifyEnabled false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def buildName = "appExp"
            def type = variant.buildType.name
            def releaseApkName = buildName + '_' + type + "_" + versionName + '.apk'
            outputFileName = releaseApkName
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation extAppcompat
    implementation extConstraint
    implementation extRecyclerview
    implementation extDesign

    implementation extEventBus
    implementation project(path: ':base')
    implementation project(path: ':utils')
    implementation project(path: ':view')
    implementation project(path: ':imageloader')
    implementation project(path: ':dialog')

    //implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    //releaseImplementation releaseLeakCanary
    //debugImplementation debugLeakCanary

    implementation extAnnotations
    implementation extGlide
    annotationProcessor extGlideCompiler
}


/*project.afterEvaluate {
    Task task = null
    try {
        task = project.tasks.getByName("mergeDebugAssets")
        println("find task")
    } catch (UnknownTaskException e) {
        println("not find task")
        println(e.printStackTrace())
    }

    task.dependsOn(myTask)

}*/


/*project.tasks.whenTaskAdded {Task theTask ->
    if(theTask.name == "assembleDebug"){
        theTask.dependsOn(myTask)
    }
}*/
task myTask(){

    println("this is myTask to do test")

    doLast(new Action<Task>(){
        @Override
        void execute(Task task) {
            println("doTest  1111111111")
        }
    })

}

